%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.11.2
-module(dgiot_dlink_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_login_response.Ack'/1, 'enum_value_by_symbol_login_response.Ack'/1]).
-export(['enum_symbol_by_value_logout_response.Ack'/1, 'enum_value_by_symbol_logout_response.Ack'/1]).
-export(['enum_symbol_by_value_payload_response.Ack'/1, 'enum_value_by_symbol_payload_response.Ack'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types
-type 'login_response.Ack'() :: 'NOACK' | 'ACK'.
-type 'logout_response.Ack'() :: 'NOACK' | 'ACK'.
-type 'payload_response.Ack'() :: 'NOACK' | 'ACK'.
-export_type(['login_response.Ack'/0, 'logout_response.Ack'/0, 'payload_response.Ack'/0]).

%% message types
-type login_request() ::
      #{data                    => iodata()         % = 2
       }.

-type login_response() ::
      #{status                  => 'NOACK' | 'ACK' | integer(), % = 1, enum login_response.Ack
        ack                     => iodata(),        % = 2
        productid               => iodata(),        % = 3
        devaddr                 => iodata(),        % = 4
        payload                 => iodata()         % = 5
       }.

-type logout_request() ::
      #{productid               => iodata(),        % = 1
        devaddr                 => iodata(),        % = 2
        data                    => iodata()         % = 3
       }.

-type logout_response() ::
      #{status                  => 'NOACK' | 'ACK' | integer(), % = 1, enum logout_response.Ack
        ack                     => iodata(),        % = 2
        topic                   => iodata(),        % = 3
        payload                 => iodata()         % = 4
       }.

-type payload_request() ::
      #{productid               => iodata(),        % = 1
        devaddr                 => iodata(),        % = 2
        data                    => iodata()         % = 3
       }.

-type payload_response() ::
      #{status                  => 'NOACK' | 'ACK' | integer(), % = 1, enum payload_response.Ack
        ack                     => iodata(),        % = 2
        topic                   => iodata(),        % = 3
        payload                 => iodata()         % = 4
       }.

-export_type(['login_request'/0, 'login_response'/0, 'logout_request'/0, 'logout_response'/0, 'payload_request'/0, 'payload_response'/0]).

-spec encode_msg(login_request() | login_response() | logout_request() | logout_response() | payload_request() | payload_response(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []).

-spec encode_msg(login_request() | login_response() | logout_request() | logout_response() | payload_request() | payload_response(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        login_request ->
            encode_msg_login_request(id(Msg, TrUserData),
                                     TrUserData);
        login_response ->
            encode_msg_login_response(id(Msg, TrUserData),
                                      TrUserData);
        logout_request ->
            encode_msg_logout_request(id(Msg, TrUserData),
                                      TrUserData);
        logout_response ->
            encode_msg_logout_response(id(Msg, TrUserData),
                                       TrUserData);
        payload_request ->
            encode_msg_payload_request(id(Msg, TrUserData),
                                       TrUserData);
        payload_response ->
            encode_msg_payload_response(id(Msg, TrUserData),
                                        TrUserData)
    end.


encode_msg_login_request(Msg, TrUserData) ->
    encode_msg_login_request(Msg, <<>>, TrUserData).


encode_msg_login_request(#{} = M, Bin, TrUserData) ->
    case M of
        #{data := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false ->
                        e_type_string(TrF1, <<Bin/binary, 18>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_login_response(Msg, TrUserData) ->
    encode_msg_login_response(Msg, <<>>, TrUserData).


encode_msg_login_response(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{status := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 'NOACK'; TrF1 =:= 0 -> Bin;
                        true ->
                            'e_enum_login_response.Ack'(TrF1,
                                                        <<Bin/binary, 8>>,
                                                        TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{ack := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false ->
                             e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{productid := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     case is_empty_string(TrF3) of
                         true -> B2;
                         false ->
                             e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    B4 = case M of
             #{devaddr := F4} ->
                 begin
                     TrF4 = id(F4, TrUserData),
                     case is_empty_string(TrF4) of
                         true -> B3;
                         false ->
                             e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
                     end
                 end;
             _ -> B3
         end,
    case M of
        #{payload := F5} ->
            begin
                TrF5 = id(F5, TrUserData),
                case is_empty_string(TrF5) of
                    true -> B4;
                    false ->
                        e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
                end
            end;
        _ -> B4
    end.

encode_msg_logout_request(Msg, TrUserData) ->
    encode_msg_logout_request(Msg, <<>>, TrUserData).


encode_msg_logout_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{productid := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false ->
                             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{devaddr := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false ->
                             e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{data := F3} ->
            begin
                TrF3 = id(F3, TrUserData),
                case is_empty_string(TrF3) of
                    true -> B2;
                    false ->
                        e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                end
            end;
        _ -> B2
    end.

encode_msg_logout_response(Msg, TrUserData) ->
    encode_msg_logout_response(Msg, <<>>, TrUserData).


encode_msg_logout_response(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{status := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 'NOACK'; TrF1 =:= 0 -> Bin;
                        true ->
                            'e_enum_logout_response.Ack'(TrF1,
                                                         <<Bin/binary, 8>>,
                                                         TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{ack := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false ->
                             e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{topic := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     case is_empty_string(TrF3) of
                         true -> B2;
                         false ->
                             e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    case M of
        #{payload := F4} ->
            begin
                TrF4 = id(F4, TrUserData),
                case is_empty_string(TrF4) of
                    true -> B3;
                    false ->
                        e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
                end
            end;
        _ -> B3
    end.

encode_msg_payload_request(Msg, TrUserData) ->
    encode_msg_payload_request(Msg, <<>>, TrUserData).


encode_msg_payload_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{productid := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false ->
                             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{devaddr := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false ->
                             e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{data := F3} ->
            begin
                TrF3 = id(F3, TrUserData),
                case is_empty_string(TrF3) of
                    true -> B2;
                    false ->
                        e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                end
            end;
        _ -> B2
    end.

encode_msg_payload_response(Msg, TrUserData) ->
    encode_msg_payload_response(Msg, <<>>, TrUserData).


encode_msg_payload_response(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{status := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 'NOACK'; TrF1 =:= 0 -> Bin;
                        true ->
                            'e_enum_payload_response.Ack'(TrF1,
                                                          <<Bin/binary, 8>>,
                                                          TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{ack := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false ->
                             e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{topic := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     case is_empty_string(TrF3) of
                         true -> B2;
                         false ->
                             e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    case M of
        #{payload := F4} ->
            begin
                TrF4 = id(F4, TrUserData),
                case is_empty_string(TrF4) of
                    true -> B3;
                    false ->
                        e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
                end
            end;
        _ -> B3
    end.

'e_enum_login_response.Ack'('NOACK', Bin,
                            _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_login_response.Ack'('ACK', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_login_response.Ack'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_logout_response.Ack'('NOACK', Bin,
                             _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_logout_response.Ack'('ACK', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_logout_response.Ack'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_payload_response.Ack'('NOACK', Bin,
                              _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_payload_response.Ack'('ACK', Bin,
                              _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_payload_response.Ack'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(login_request, Bin, TrUserData) ->
    id(decode_msg_login_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(login_response, Bin, TrUserData) ->
    id(decode_msg_login_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(logout_request, Bin, TrUserData) ->
    id(decode_msg_logout_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(logout_response, Bin, TrUserData) ->
    id(decode_msg_logout_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(payload_request, Bin, TrUserData) ->
    id(decode_msg_payload_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(payload_response, Bin, TrUserData) ->
    id(decode_msg_payload_response(Bin, TrUserData),
       TrUserData).



decode_msg_login_request(Bin, TrUserData) ->
    dfp_read_field_def_login_request(Bin,
                                     0,
                                     0,
                                     id(<<>>, TrUserData),
                                     TrUserData).

dfp_read_field_def_login_request(<<18, Rest/binary>>,
                                 Z1, Z2, F@_1, TrUserData) ->
    d_field_login_request_data(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               TrUserData);
dfp_read_field_def_login_request(<<>>, 0, 0, F@_1, _) ->
    #{data => F@_1};
dfp_read_field_def_login_request(Other, Z1, Z2, F@_1,
                                 TrUserData) ->
    dg_read_field_def_login_request(Other,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    TrUserData).

dg_read_field_def_login_request(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_login_request(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    TrUserData);
dg_read_field_def_login_request(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        18 ->
            d_field_login_request_data(Rest,
                                       0,
                                       0,
                                       F@_1,
                                       TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_login_request(Rest, 0, 0, F@_1, TrUserData);
                1 ->
                    skip_64_login_request(Rest, 0, 0, F@_1, TrUserData);
                2 ->
                    skip_length_delimited_login_request(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        TrUserData);
                3 ->
                    skip_group_login_request(Rest,
                                             Key bsr 3,
                                             0,
                                             F@_1,
                                             TrUserData);
                5 -> skip_32_login_request(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_login_request(<<>>, 0, 0, F@_1, _) ->
    #{data => F@_1}.

d_field_login_request_data(<<1:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_login_request_data(Rest,
                               N + 7,
                               X bsl N + Acc,
                               F@_1,
                               TrUserData);
d_field_login_request_data(<<0:1, X:7, Rest/binary>>, N,
                           Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_login_request(RestF,
                                     0,
                                     0,
                                     NewFValue,
                                     TrUserData).

skip_varint_login_request(<<1:1, _:7, Rest/binary>>, Z1,
                          Z2, F@_1, TrUserData) ->
    skip_varint_login_request(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              TrUserData);
skip_varint_login_request(<<0:1, _:7, Rest/binary>>, Z1,
                          Z2, F@_1, TrUserData) ->
    dfp_read_field_def_login_request(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     TrUserData).

skip_length_delimited_login_request(<<1:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_login_request(Rest,
                                        N + 7,
                                        X bsl N + Acc,
                                        F@_1,
                                        TrUserData);
skip_length_delimited_login_request(<<0:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_login_request(Rest2,
                                     0,
                                     0,
                                     F@_1,
                                     TrUserData).

skip_group_login_request(Bin, FNum, Z2, F@_1,
                         TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_login_request(Rest,
                                     0,
                                     Z2,
                                     F@_1,
                                     TrUserData).

skip_32_login_request(<<_:32, Rest/binary>>, Z1, Z2,
                      F@_1, TrUserData) ->
    dfp_read_field_def_login_request(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     TrUserData).

skip_64_login_request(<<_:64, Rest/binary>>, Z1, Z2,
                      F@_1, TrUserData) ->
    dfp_read_field_def_login_request(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     TrUserData).

decode_msg_login_response(Bin, TrUserData) ->
    dfp_read_field_def_login_response(Bin,
                                      0,
                                      0,
                                      id('NOACK', TrUserData),
                                      id(<<>>, TrUserData),
                                      id(<<>>, TrUserData),
                                      id(<<>>, TrUserData),
                                      id(<<>>, TrUserData),
                                      TrUserData).

dfp_read_field_def_login_response(<<8, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                  TrUserData) ->
    d_field_login_response_status(Rest,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  TrUserData);
dfp_read_field_def_login_response(<<18, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                  TrUserData) ->
    d_field_login_response_ack(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               TrUserData);
dfp_read_field_def_login_response(<<26, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                  TrUserData) ->
    d_field_login_response_productid(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     F@_4,
                                     F@_5,
                                     TrUserData);
dfp_read_field_def_login_response(<<34, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                  TrUserData) ->
    d_field_login_response_devaddr(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   TrUserData);
dfp_read_field_def_login_response(<<42, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                  TrUserData) ->
    d_field_login_response_payload(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   TrUserData);
dfp_read_field_def_login_response(<<>>, 0, 0, F@_1,
                                  F@_2, F@_3, F@_4, F@_5, _) ->
    #{status => F@_1, ack => F@_2, productid => F@_3,
      devaddr => F@_4, payload => F@_5};
dfp_read_field_def_login_response(Other, Z1, Z2, F@_1,
                                  F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_login_response(Other,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     F@_4,
                                     F@_5,
                                     TrUserData).

dg_read_field_def_login_response(<<1:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                 TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_login_response(Rest,
                                     N + 7,
                                     X bsl N + Acc,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     F@_4,
                                     F@_5,
                                     TrUserData);
dg_read_field_def_login_response(<<0:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_login_response_status(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          TrUserData);
        18 ->
            d_field_login_response_ack(Rest,
                                       0,
                                       0,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       F@_5,
                                       TrUserData);
        26 ->
            d_field_login_response_productid(Rest,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             F@_5,
                                             TrUserData);
        34 ->
            d_field_login_response_devaddr(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           TrUserData);
        42 ->
            d_field_login_response_payload(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_login_response(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               F@_4,
                                               F@_5,
                                               TrUserData);
                1 ->
                    skip_64_login_response(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           TrUserData);
                2 ->
                    skip_length_delimited_login_response(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         TrUserData);
                3 ->
                    skip_group_login_response(Rest,
                                              Key bsr 3,
                                              0,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              F@_5,
                                              TrUserData);
                5 ->
                    skip_32_login_response(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           TrUserData)
            end
    end;
dg_read_field_def_login_response(<<>>, 0, 0, F@_1, F@_2,
                                 F@_3, F@_4, F@_5, _) ->
    #{status => F@_1, ack => F@_2, productid => F@_3,
      devaddr => F@_4, payload => F@_5}.

d_field_login_response_status(<<1:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_login_response_status(Rest,
                                  N + 7,
                                  X bsl N + Acc,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  TrUserData);
d_field_login_response_status(<<0:1, X:7, Rest/binary>>,
                              N, Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} =
        {id('d_enum_login_response.Ack'(begin
                                            <<Res:32/signed-native>> = <<(X bsl
                                                                              N
                                                                              +
                                                                              Acc):32/unsigned-native>>,
                                            id(Res, TrUserData)
                                        end),
            TrUserData),
         Rest},
    dfp_read_field_def_login_response(RestF,
                                      0,
                                      0,
                                      NewFValue,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      TrUserData).

d_field_login_response_ack(<<1:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_login_response_ack(Rest,
                               N + 7,
                               X bsl N + Acc,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               TrUserData);
d_field_login_response_ack(<<0:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_login_response(RestF,
                                      0,
                                      0,
                                      F@_1,
                                      NewFValue,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      TrUserData).

d_field_login_response_productid(<<1:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                 TrUserData)
    when N < 57 ->
    d_field_login_response_productid(Rest,
                                     N + 7,
                                     X bsl N + Acc,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     F@_4,
                                     F@_5,
                                     TrUserData);
d_field_login_response_productid(<<0:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, _, F@_4, F@_5,
                                 TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_login_response(RestF,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      NewFValue,
                                      F@_4,
                                      F@_5,
                                      TrUserData).

d_field_login_response_devaddr(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_login_response_devaddr(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   TrUserData);
d_field_login_response_devaddr(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_login_response(RestF,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      NewFValue,
                                      F@_5,
                                      TrUserData).

d_field_login_response_payload(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_login_response_payload(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   TrUserData);
d_field_login_response_payload(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_login_response(RestF,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      NewFValue,
                                      TrUserData).

skip_varint_login_response(<<1:1, _:7, Rest/binary>>,
                           Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_login_response(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               TrUserData);
skip_varint_login_response(<<0:1, _:7, Rest/binary>>,
                           Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_login_response(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      TrUserData).

skip_length_delimited_login_response(<<1:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                     TrUserData)
    when N < 57 ->
    skip_length_delimited_login_response(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         TrUserData);
skip_length_delimited_login_response(<<0:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_login_response(Rest2,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      TrUserData).

skip_group_login_response(Bin, FNum, Z2, F@_1, F@_2,
                          F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_login_response(Rest,
                                      0,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      TrUserData).

skip_32_login_response(<<_:32, Rest/binary>>, Z1, Z2,
                       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_login_response(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      TrUserData).

skip_64_login_response(<<_:64, Rest/binary>>, Z1, Z2,
                       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_login_response(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      TrUserData).

decode_msg_logout_request(Bin, TrUserData) ->
    dfp_read_field_def_logout_request(Bin,
                                      0,
                                      0,
                                      id(<<>>, TrUserData),
                                      id(<<>>, TrUserData),
                                      id(<<>>, TrUserData),
                                      TrUserData).

dfp_read_field_def_logout_request(<<10, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_logout_request_productid(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     TrUserData);
dfp_read_field_def_logout_request(<<18, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_logout_request_devaddr(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   TrUserData);
dfp_read_field_def_logout_request(<<26, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_logout_request_data(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                F@_3,
                                TrUserData);
dfp_read_field_def_logout_request(<<>>, 0, 0, F@_1,
                                  F@_2, F@_3, _) ->
    #{productid => F@_1, devaddr => F@_2, data => F@_3};
dfp_read_field_def_logout_request(Other, Z1, Z2, F@_1,
                                  F@_2, F@_3, TrUserData) ->
    dg_read_field_def_logout_request(Other,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     TrUserData).

dg_read_field_def_logout_request(<<1:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_logout_request(Rest,
                                     N + 7,
                                     X bsl N + Acc,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     TrUserData);
dg_read_field_def_logout_request(<<0:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_logout_request_productid(Rest,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             TrUserData);
        18 ->
            d_field_logout_request_devaddr(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           TrUserData);
        26 ->
            d_field_logout_request_data(Rest,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_logout_request(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               TrUserData);
                1 ->
                    skip_64_logout_request(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           TrUserData);
                2 ->
                    skip_length_delimited_logout_request(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         TrUserData);
                3 ->
                    skip_group_logout_request(Rest,
                                              Key bsr 3,
                                              0,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              TrUserData);
                5 ->
                    skip_32_logout_request(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           TrUserData)
            end
    end;
dg_read_field_def_logout_request(<<>>, 0, 0, F@_1, F@_2,
                                 F@_3, _) ->
    #{productid => F@_1, devaddr => F@_2, data => F@_3}.

d_field_logout_request_productid(<<1:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_logout_request_productid(Rest,
                                     N + 7,
                                     X bsl N + Acc,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     TrUserData);
d_field_logout_request_productid(<<0:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_logout_request(RestF,
                                      0,
                                      0,
                                      NewFValue,
                                      F@_2,
                                      F@_3,
                                      TrUserData).

d_field_logout_request_devaddr(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_logout_request_devaddr(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   TrUserData);
d_field_logout_request_devaddr(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_logout_request(RestF,
                                      0,
                                      0,
                                      F@_1,
                                      NewFValue,
                                      F@_3,
                                      TrUserData).

d_field_logout_request_data(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_logout_request_data(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                F@_2,
                                F@_3,
                                TrUserData);
d_field_logout_request_data(<<0:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_logout_request(RestF,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      NewFValue,
                                      TrUserData).

skip_varint_logout_request(<<1:1, _:7, Rest/binary>>,
                           Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_logout_request(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               F@_2,
                               F@_3,
                               TrUserData);
skip_varint_logout_request(<<0:1, _:7, Rest/binary>>,
                           Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_logout_request(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData).

skip_length_delimited_logout_request(<<1:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_logout_request(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         TrUserData);
skip_length_delimited_logout_request(<<0:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_logout_request(Rest2,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData).

skip_group_logout_request(Bin, FNum, Z2, F@_1, F@_2,
                          F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_logout_request(Rest,
                                      0,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData).

skip_32_logout_request(<<_:32, Rest/binary>>, Z1, Z2,
                       F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_logout_request(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData).

skip_64_logout_request(<<_:64, Rest/binary>>, Z1, Z2,
                       F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_logout_request(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData).

decode_msg_logout_response(Bin, TrUserData) ->
    dfp_read_field_def_logout_response(Bin,
                                       0,
                                       0,
                                       id('NOACK', TrUserData),
                                       id(<<>>, TrUserData),
                                       id(<<>>, TrUserData),
                                       id(<<>>, TrUserData),
                                       TrUserData).

dfp_read_field_def_logout_response(<<8, Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                   TrUserData) ->
    d_field_logout_response_status(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   TrUserData);
dfp_read_field_def_logout_response(<<18, Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                   TrUserData) ->
    d_field_logout_response_ack(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                TrUserData);
dfp_read_field_def_logout_response(<<26, Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                   TrUserData) ->
    d_field_logout_response_topic(Rest,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  TrUserData);
dfp_read_field_def_logout_response(<<34, Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                   TrUserData) ->
    d_field_logout_response_payload(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    TrUserData);
dfp_read_field_def_logout_response(<<>>, 0, 0, F@_1,
                                   F@_2, F@_3, F@_4, _) ->
    #{status => F@_1, ack => F@_2, topic => F@_3,
      payload => F@_4};
dfp_read_field_def_logout_response(Other, Z1, Z2, F@_1,
                                   F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_logout_response(Other,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      TrUserData).

dg_read_field_def_logout_response(<<1:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_logout_response(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      TrUserData);
dg_read_field_def_logout_response(<<0:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_logout_response_status(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           TrUserData);
        18 ->
            d_field_logout_response_ack(Rest,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        TrUserData);
        26 ->
            d_field_logout_response_topic(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          TrUserData);
        34 ->
            d_field_logout_response_payload(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            F@_4,
                                            TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_logout_response(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                TrUserData);
                1 ->
                    skip_64_logout_response(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            F@_4,
                                            TrUserData);
                2 ->
                    skip_length_delimited_logout_response(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          F@_4,
                                                          TrUserData);
                3 ->
                    skip_group_logout_response(Rest,
                                               Key bsr 3,
                                               0,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               F@_4,
                                               TrUserData);
                5 ->
                    skip_32_logout_response(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            F@_4,
                                            TrUserData)
            end
    end;
dg_read_field_def_logout_response(<<>>, 0, 0, F@_1,
                                  F@_2, F@_3, F@_4, _) ->
    #{status => F@_1, ack => F@_2, topic => F@_3,
      payload => F@_4}.

d_field_logout_response_status(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_logout_response_status(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   TrUserData);
d_field_logout_response_status(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} =
        {id('d_enum_logout_response.Ack'(begin
                                             <<Res:32/signed-native>> = <<(X bsl
                                                                               N
                                                                               +
                                                                               Acc):32/unsigned-native>>,
                                             id(Res, TrUserData)
                                         end),
            TrUserData),
         Rest},
    dfp_read_field_def_logout_response(RestF,
                                       0,
                                       0,
                                       NewFValue,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       TrUserData).

d_field_logout_response_ack(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_logout_response_ack(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                TrUserData);
d_field_logout_response_ack(<<0:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_logout_response(RestF,
                                       0,
                                       0,
                                       F@_1,
                                       NewFValue,
                                       F@_3,
                                       F@_4,
                                       TrUserData).

d_field_logout_response_topic(<<1:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_logout_response_topic(Rest,
                                  N + 7,
                                  X bsl N + Acc,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  TrUserData);
d_field_logout_response_topic(<<0:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_logout_response(RestF,
                                       0,
                                       0,
                                       F@_1,
                                       F@_2,
                                       NewFValue,
                                       F@_4,
                                       TrUserData).

d_field_logout_response_payload(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_logout_response_payload(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    TrUserData);
d_field_logout_response_payload(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_logout_response(RestF,
                                       0,
                                       0,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       NewFValue,
                                       TrUserData).

skip_varint_logout_response(<<1:1, _:7, Rest/binary>>,
                            Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_logout_response(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                TrUserData);
skip_varint_logout_response(<<0:1, _:7, Rest/binary>>,
                            Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_logout_response(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       TrUserData).

skip_length_delimited_logout_response(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, F@_3, F@_4,
                                      TrUserData)
    when N < 57 ->
    skip_length_delimited_logout_response(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          TrUserData);
skip_length_delimited_logout_response(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, F@_3, F@_4,
                                      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_logout_response(Rest2,
                                       0,
                                       0,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       TrUserData).

skip_group_logout_response(Bin, FNum, Z2, F@_1, F@_2,
                           F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_logout_response(Rest,
                                       0,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       TrUserData).

skip_32_logout_response(<<_:32, Rest/binary>>, Z1, Z2,
                        F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_logout_response(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       TrUserData).

skip_64_logout_response(<<_:64, Rest/binary>>, Z1, Z2,
                        F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_logout_response(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       TrUserData).

decode_msg_payload_request(Bin, TrUserData) ->
    dfp_read_field_def_payload_request(Bin,
                                       0,
                                       0,
                                       id(<<>>, TrUserData),
                                       id(<<>>, TrUserData),
                                       id(<<>>, TrUserData),
                                       TrUserData).

dfp_read_field_def_payload_request(<<10, Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_payload_request_productid(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData);
dfp_read_field_def_payload_request(<<18, Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_payload_request_devaddr(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    TrUserData);
dfp_read_field_def_payload_request(<<26, Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_payload_request_data(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 TrUserData);
dfp_read_field_def_payload_request(<<>>, 0, 0, F@_1,
                                   F@_2, F@_3, _) ->
    #{productid => F@_1, devaddr => F@_2, data => F@_3};
dfp_read_field_def_payload_request(Other, Z1, Z2, F@_1,
                                   F@_2, F@_3, TrUserData) ->
    dg_read_field_def_payload_request(Other,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData).

dg_read_field_def_payload_request(<<1:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_payload_request(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData);
dg_read_field_def_payload_request(<<0:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_payload_request_productid(Rest,
                                              0,
                                              0,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              TrUserData);
        18 ->
            d_field_payload_request_devaddr(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            TrUserData);
        26 ->
            d_field_payload_request_data(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_payload_request(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                TrUserData);
                1 ->
                    skip_64_payload_request(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            TrUserData);
                2 ->
                    skip_length_delimited_payload_request(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          TrUserData);
                3 ->
                    skip_group_payload_request(Rest,
                                               Key bsr 3,
                                               0,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               TrUserData);
                5 ->
                    skip_32_payload_request(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            TrUserData)
            end
    end;
dg_read_field_def_payload_request(<<>>, 0, 0, F@_1,
                                  F@_2, F@_3, _) ->
    #{productid => F@_1, devaddr => F@_2, data => F@_3}.

d_field_payload_request_productid(<<1:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_payload_request_productid(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData);
d_field_payload_request_productid(<<0:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_payload_request(RestF,
                                       0,
                                       0,
                                       NewFValue,
                                       F@_2,
                                       F@_3,
                                       TrUserData).

d_field_payload_request_devaddr(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_payload_request_devaddr(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    TrUserData);
d_field_payload_request_devaddr(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_payload_request(RestF,
                                       0,
                                       0,
                                       F@_1,
                                       NewFValue,
                                       F@_3,
                                       TrUserData).

d_field_payload_request_data(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_payload_request_data(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 TrUserData);
d_field_payload_request_data(<<0:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_payload_request(RestF,
                                       0,
                                       0,
                                       F@_1,
                                       F@_2,
                                       NewFValue,
                                       TrUserData).

skip_varint_payload_request(<<1:1, _:7, Rest/binary>>,
                            Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_payload_request(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                F@_3,
                                TrUserData);
skip_varint_payload_request(<<0:1, _:7, Rest/binary>>,
                            Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_payload_request(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       TrUserData).

skip_length_delimited_payload_request(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_payload_request(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          TrUserData);
skip_length_delimited_payload_request(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_payload_request(Rest2,
                                       0,
                                       0,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       TrUserData).

skip_group_payload_request(Bin, FNum, Z2, F@_1, F@_2,
                           F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_payload_request(Rest,
                                       0,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       TrUserData).

skip_32_payload_request(<<_:32, Rest/binary>>, Z1, Z2,
                        F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_payload_request(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       TrUserData).

skip_64_payload_request(<<_:64, Rest/binary>>, Z1, Z2,
                        F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_payload_request(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       TrUserData).

decode_msg_payload_response(Bin, TrUserData) ->
    dfp_read_field_def_payload_response(Bin,
                                        0,
                                        0,
                                        id('NOACK', TrUserData),
                                        id(<<>>, TrUserData),
                                        id(<<>>, TrUserData),
                                        id(<<>>, TrUserData),
                                        TrUserData).

dfp_read_field_def_payload_response(<<8, Rest/binary>>,
                                    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                    TrUserData) ->
    d_field_payload_response_status(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    TrUserData);
dfp_read_field_def_payload_response(<<18, Rest/binary>>,
                                    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                    TrUserData) ->
    d_field_payload_response_ack(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 TrUserData);
dfp_read_field_def_payload_response(<<26, Rest/binary>>,
                                    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                    TrUserData) ->
    d_field_payload_response_topic(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   TrUserData);
dfp_read_field_def_payload_response(<<34, Rest/binary>>,
                                    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                    TrUserData) ->
    d_field_payload_response_payload(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     F@_4,
                                     TrUserData);
dfp_read_field_def_payload_response(<<>>, 0, 0, F@_1,
                                    F@_2, F@_3, F@_4, _) ->
    #{status => F@_1, ack => F@_2, topic => F@_3,
      payload => F@_4};
dfp_read_field_def_payload_response(Other, Z1, Z2, F@_1,
                                    F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_payload_response(Other,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       TrUserData).

dg_read_field_def_payload_response(<<1:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_payload_response(Rest,
                                       N + 7,
                                       X bsl N + Acc,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       TrUserData);
dg_read_field_def_payload_response(<<0:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, F@_2, F@_3, F@_4,
                                   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_payload_response_status(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            F@_4,
                                            TrUserData);
        18 ->
            d_field_payload_response_ack(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         TrUserData);
        26 ->
            d_field_payload_response_topic(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           TrUserData);
        34 ->
            d_field_payload_response_payload(Rest,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_payload_response(Rest,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 TrUserData);
                1 ->
                    skip_64_payload_response(Rest,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             TrUserData);
                2 ->
                    skip_length_delimited_payload_response(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           TrUserData);
                3 ->
                    skip_group_payload_response(Rest,
                                                Key bsr 3,
                                                0,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                TrUserData);
                5 ->
                    skip_32_payload_response(Rest,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             TrUserData)
            end
    end;
dg_read_field_def_payload_response(<<>>, 0, 0, F@_1,
                                   F@_2, F@_3, F@_4, _) ->
    #{status => F@_1, ack => F@_2, topic => F@_3,
      payload => F@_4}.

d_field_payload_response_status(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_payload_response_status(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    TrUserData);
d_field_payload_response_status(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} =
        {id('d_enum_payload_response.Ack'(begin
                                              <<Res:32/signed-native>> = <<(X
                                                                                bsl
                                                                                N
                                                                                +
                                                                                Acc):32/unsigned-native>>,
                                              id(Res, TrUserData)
                                          end),
            TrUserData),
         Rest},
    dfp_read_field_def_payload_response(RestF,
                                        0,
                                        0,
                                        NewFValue,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        TrUserData).

d_field_payload_response_ack(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_payload_response_ack(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 TrUserData);
d_field_payload_response_ack(<<0:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_payload_response(RestF,
                                        0,
                                        0,
                                        F@_1,
                                        NewFValue,
                                        F@_3,
                                        F@_4,
                                        TrUserData).

d_field_payload_response_topic(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_payload_response_topic(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   TrUserData);
d_field_payload_response_topic(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_payload_response(RestF,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        NewFValue,
                                        F@_4,
                                        TrUserData).

d_field_payload_response_payload(<<1:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_payload_response_payload(Rest,
                                     N + 7,
                                     X bsl N + Acc,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     F@_4,
                                     TrUserData);
d_field_payload_response_payload(<<0:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_payload_response(RestF,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        NewFValue,
                                        TrUserData).

skip_varint_payload_response(<<1:1, _:7, Rest/binary>>,
                             Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_payload_response(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 TrUserData);
skip_varint_payload_response(<<0:1, _:7, Rest/binary>>,
                             Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_payload_response(Rest,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        TrUserData).

skip_length_delimited_payload_response(<<1:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, F@_2, F@_3, F@_4,
                                       TrUserData)
    when N < 57 ->
    skip_length_delimited_payload_response(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           TrUserData);
skip_length_delimited_payload_response(<<0:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, F@_2, F@_3, F@_4,
                                       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_payload_response(Rest2,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        TrUserData).

skip_group_payload_response(Bin, FNum, Z2, F@_1, F@_2,
                            F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_payload_response(Rest,
                                        0,
                                        Z2,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        TrUserData).

skip_32_payload_response(<<_:32, Rest/binary>>, Z1, Z2,
                         F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_payload_response(Rest,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        TrUserData).

skip_64_payload_response(<<_:64, Rest/binary>>, Z1, Z2,
                         F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_payload_response(Rest,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        TrUserData).

'd_enum_login_response.Ack'(0) -> 'NOACK';
'd_enum_login_response.Ack'(1) -> 'ACK';
'd_enum_login_response.Ack'(V) -> V.

'd_enum_logout_response.Ack'(0) -> 'NOACK';
'd_enum_logout_response.Ack'(1) -> 'ACK';
'd_enum_logout_response.Ack'(V) -> V.

'd_enum_payload_response.Ack'(0) -> 'NOACK';
'd_enum_payload_response.Ack'(1) -> 'ACK';
'd_enum_payload_response.Ack'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        login_request ->
            merge_msg_login_request(Prev, New, TrUserData);
        login_response ->
            merge_msg_login_response(Prev, New, TrUserData);
        logout_request ->
            merge_msg_logout_request(Prev, New, TrUserData);
        logout_response ->
            merge_msg_logout_response(Prev, New, TrUserData);
        payload_request ->
            merge_msg_payload_request(Prev, New, TrUserData);
        payload_response ->
            merge_msg_payload_response(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_login_request/3}).
merge_msg_login_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{data := NFdata}} -> S1#{data => NFdata};
        {#{data := PFdata}, _} -> S1#{data => PFdata};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_login_response/3}).
merge_msg_login_response(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{status := NFstatus}} -> S1#{status => NFstatus};
             {#{status := PFstatus}, _} -> S1#{status => PFstatus};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{ack := NFack}} -> S2#{ack => NFack};
             {#{ack := PFack}, _} -> S2#{ack => PFack};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{productid := NFproductid}} ->
                 S3#{productid => NFproductid};
             {#{productid := PFproductid}, _} ->
                 S3#{productid => PFproductid};
             _ -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{devaddr := NFdevaddr}} ->
                 S4#{devaddr => NFdevaddr};
             {#{devaddr := PFdevaddr}, _} ->
                 S4#{devaddr => PFdevaddr};
             _ -> S4
         end,
    case {PMsg, NMsg} of
        {_, #{payload := NFpayload}} ->
            S5#{payload => NFpayload};
        {#{payload := PFpayload}, _} ->
            S5#{payload => PFpayload};
        _ -> S5
    end.

-compile({nowarn_unused_function,merge_msg_logout_request/3}).
merge_msg_logout_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{productid := NFproductid}} ->
                 S1#{productid => NFproductid};
             {#{productid := PFproductid}, _} ->
                 S1#{productid => PFproductid};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{devaddr := NFdevaddr}} ->
                 S2#{devaddr => NFdevaddr};
             {#{devaddr := PFdevaddr}, _} ->
                 S2#{devaddr => PFdevaddr};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {_, #{data := NFdata}} -> S3#{data => NFdata};
        {#{data := PFdata}, _} -> S3#{data => PFdata};
        _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_logout_response/3}).
merge_msg_logout_response(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{status := NFstatus}} -> S1#{status => NFstatus};
             {#{status := PFstatus}, _} -> S1#{status => PFstatus};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{ack := NFack}} -> S2#{ack => NFack};
             {#{ack := PFack}, _} -> S2#{ack => PFack};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{topic := NFtopic}} -> S3#{topic => NFtopic};
             {#{topic := PFtopic}, _} -> S3#{topic => PFtopic};
             _ -> S3
         end,
    case {PMsg, NMsg} of
        {_, #{payload := NFpayload}} ->
            S4#{payload => NFpayload};
        {#{payload := PFpayload}, _} ->
            S4#{payload => PFpayload};
        _ -> S4
    end.

-compile({nowarn_unused_function,merge_msg_payload_request/3}).
merge_msg_payload_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{productid := NFproductid}} ->
                 S1#{productid => NFproductid};
             {#{productid := PFproductid}, _} ->
                 S1#{productid => PFproductid};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{devaddr := NFdevaddr}} ->
                 S2#{devaddr => NFdevaddr};
             {#{devaddr := PFdevaddr}, _} ->
                 S2#{devaddr => PFdevaddr};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {_, #{data := NFdata}} -> S3#{data => NFdata};
        {#{data := PFdata}, _} -> S3#{data => PFdata};
        _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_payload_response/3}).
merge_msg_payload_response(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{status := NFstatus}} -> S1#{status => NFstatus};
             {#{status := PFstatus}, _} -> S1#{status => PFstatus};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{ack := NFack}} -> S2#{ack => NFack};
             {#{ack := PFack}, _} -> S2#{ack => PFack};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{topic := NFtopic}} -> S3#{topic => NFtopic};
             {#{topic := PFtopic}, _} -> S3#{topic => PFtopic};
             _ -> S3
         end,
    case {PMsg, NMsg} of
        {_, #{payload := NFpayload}} ->
            S4#{payload => NFpayload};
        {#{payload := PFpayload}, _} ->
            S4#{payload => PFpayload};
        _ -> S4
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        login_request ->
            v_msg_login_request(Msg, [MsgName], TrUserData);
        login_response ->
            v_msg_login_response(Msg, [MsgName], TrUserData);
        logout_request ->
            v_msg_logout_request(Msg, [MsgName], TrUserData);
        logout_response ->
            v_msg_logout_response(Msg, [MsgName], TrUserData);
        payload_request ->
            v_msg_payload_request(Msg, [MsgName], TrUserData);
        payload_response ->
            v_msg_payload_response(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_login_request/3}).
-dialyzer({nowarn_function,v_msg_login_request/3}).
v_msg_login_request(#{} = M, Path, TrUserData) ->
    case M of
        #{data := F1} ->
            v_type_string(F1, [data | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (data) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_login_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   login_request},
                  M,
                  Path);
v_msg_login_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, login_request}, X, Path).

-compile({nowarn_unused_function,v_msg_login_response/3}).
-dialyzer({nowarn_function,v_msg_login_response/3}).
v_msg_login_response(#{} = M, Path, TrUserData) ->
    case M of
        #{status := F1} ->
            'v_enum_login_response.Ack'(F1,
                                        [status | Path],
                                        TrUserData);
        _ -> ok
    end,
    case M of
        #{ack := F2} ->
            v_type_string(F2, [ack | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{productid := F3} ->
            v_type_string(F3, [productid | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{devaddr := F4} ->
            v_type_string(F4, [devaddr | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{payload := F5} ->
            v_type_string(F5, [payload | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (status) -> ok;
                      (ack) -> ok;
                      (productid) -> ok;
                      (devaddr) -> ok;
                      (payload) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_login_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   login_response},
                  M,
                  Path);
v_msg_login_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, login_response}, X, Path).

-compile({nowarn_unused_function,v_msg_logout_request/3}).
-dialyzer({nowarn_function,v_msg_logout_request/3}).
v_msg_logout_request(#{} = M, Path, TrUserData) ->
    case M of
        #{productid := F1} ->
            v_type_string(F1, [productid | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{devaddr := F2} ->
            v_type_string(F2, [devaddr | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{data := F3} ->
            v_type_string(F3, [data | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (productid) -> ok;
                      (devaddr) -> ok;
                      (data) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_logout_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   logout_request},
                  M,
                  Path);
v_msg_logout_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, logout_request}, X, Path).

-compile({nowarn_unused_function,v_msg_logout_response/3}).
-dialyzer({nowarn_function,v_msg_logout_response/3}).
v_msg_logout_response(#{} = M, Path, TrUserData) ->
    case M of
        #{status := F1} ->
            'v_enum_logout_response.Ack'(F1,
                                         [status | Path],
                                         TrUserData);
        _ -> ok
    end,
    case M of
        #{ack := F2} ->
            v_type_string(F2, [ack | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{topic := F3} ->
            v_type_string(F3, [topic | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{payload := F4} ->
            v_type_string(F4, [payload | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (status) -> ok;
                      (ack) -> ok;
                      (topic) -> ok;
                      (payload) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_logout_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   logout_response},
                  M,
                  Path);
v_msg_logout_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, logout_response}, X, Path).

-compile({nowarn_unused_function,v_msg_payload_request/3}).
-dialyzer({nowarn_function,v_msg_payload_request/3}).
v_msg_payload_request(#{} = M, Path, TrUserData) ->
    case M of
        #{productid := F1} ->
            v_type_string(F1, [productid | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{devaddr := F2} ->
            v_type_string(F2, [devaddr | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{data := F3} ->
            v_type_string(F3, [data | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (productid) -> ok;
                      (devaddr) -> ok;
                      (data) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_payload_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   payload_request},
                  M,
                  Path);
v_msg_payload_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, payload_request}, X, Path).

-compile({nowarn_unused_function,v_msg_payload_response/3}).
-dialyzer({nowarn_function,v_msg_payload_response/3}).
v_msg_payload_response(#{} = M, Path, TrUserData) ->
    case M of
        #{status := F1} ->
            'v_enum_payload_response.Ack'(F1,
                                          [status | Path],
                                          TrUserData);
        _ -> ok
    end,
    case M of
        #{ack := F2} ->
            v_type_string(F2, [ack | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{topic := F3} ->
            v_type_string(F3, [topic | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{payload := F4} ->
            v_type_string(F4, [payload | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (status) -> ok;
                      (ack) -> ok;
                      (topic) -> ok;
                      (payload) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_payload_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   payload_response},
                  M,
                  Path);
v_msg_payload_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, payload_response},
                  X,
                  Path).

-compile({nowarn_unused_function,'v_enum_login_response.Ack'/3}).
-dialyzer({nowarn_function,'v_enum_login_response.Ack'/3}).
'v_enum_login_response.Ack'('NOACK', _Path,
                            _TrUserData) ->
    ok;
'v_enum_login_response.Ack'('ACK', _Path,
                            _TrUserData) ->
    ok;
'v_enum_login_response.Ack'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_login_response.Ack'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'login_response.Ack'},
                  X,
                  Path).

-compile({nowarn_unused_function,'v_enum_logout_response.Ack'/3}).
-dialyzer({nowarn_function,'v_enum_logout_response.Ack'/3}).
'v_enum_logout_response.Ack'('NOACK', _Path,
                             _TrUserData) ->
    ok;
'v_enum_logout_response.Ack'('ACK', _Path,
                             _TrUserData) ->
    ok;
'v_enum_logout_response.Ack'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_logout_response.Ack'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'logout_response.Ack'},
                  X,
                  Path).

-compile({nowarn_unused_function,'v_enum_payload_response.Ack'/3}).
-dialyzer({nowarn_function,'v_enum_payload_response.Ack'/3}).
'v_enum_payload_response.Ack'('NOACK', _Path,
                              _TrUserData) ->
    ok;
'v_enum_payload_response.Ack'('ACK', _Path,
                              _TrUserData) ->
    ok;
'v_enum_payload_response.Ack'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_payload_response.Ack'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'payload_response.Ack'},
                  X,
                  Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
                  N,
                  Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32},
                  X,
                  Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} ->
            mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg ->
            mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
                  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
                                         lists:map(fun atom_to_list/1,
                                                   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'login_response.Ack'},
      [{'NOACK', 0}, {'ACK', 1}]},
     {{enum, 'logout_response.Ack'},
      [{'NOACK', 0}, {'ACK', 1}]},
     {{enum, 'payload_response.Ack'},
      [{'NOACK', 0}, {'ACK', 1}]},
     {{msg, login_request},
      [#{name => data, fnum => 2, rnum => 2, type => string,
         occurrence => optional, opts => []}]},
     {{msg, login_response},
      [#{name => status, fnum => 1, rnum => 2,
         type => {enum, 'login_response.Ack'},
         occurrence => optional, opts => []},
       #{name => ack, fnum => 2, rnum => 3, type => string,
         occurrence => optional, opts => []},
       #{name => productid, fnum => 3, rnum => 4,
         type => string, occurrence => optional, opts => []},
       #{name => devaddr, fnum => 4, rnum => 5, type => string,
         occurrence => optional, opts => []},
       #{name => payload, fnum => 5, rnum => 6, type => string,
         occurrence => optional, opts => []}]},
     {{msg, logout_request},
      [#{name => productid, fnum => 1, rnum => 2,
         type => string, occurrence => optional, opts => []},
       #{name => devaddr, fnum => 2, rnum => 3, type => string,
         occurrence => optional, opts => []},
       #{name => data, fnum => 3, rnum => 4, type => string,
         occurrence => optional, opts => []}]},
     {{msg, logout_response},
      [#{name => status, fnum => 1, rnum => 2,
         type => {enum, 'logout_response.Ack'},
         occurrence => optional, opts => []},
       #{name => ack, fnum => 2, rnum => 3, type => string,
         occurrence => optional, opts => []},
       #{name => topic, fnum => 3, rnum => 4, type => string,
         occurrence => optional, opts => []},
       #{name => payload, fnum => 4, rnum => 5, type => string,
         occurrence => optional, opts => []}]},
     {{msg, payload_request},
      [#{name => productid, fnum => 1, rnum => 2,
         type => string, occurrence => optional, opts => []},
       #{name => devaddr, fnum => 2, rnum => 3, type => string,
         occurrence => optional, opts => []},
       #{name => data, fnum => 3, rnum => 4, type => string,
         occurrence => optional, opts => []}]},
     {{msg, payload_response},
      [#{name => status, fnum => 1, rnum => 2,
         type => {enum, 'payload_response.Ack'},
         occurrence => optional, opts => []},
       #{name => ack, fnum => 2, rnum => 3, type => string,
         occurrence => optional, opts => []},
       #{name => topic, fnum => 3, rnum => 4, type => string,
         occurrence => optional, opts => []},
       #{name => payload, fnum => 4, rnum => 5, type => string,
         occurrence => optional, opts => []}]}].


get_msg_names() ->
    [login_request,
     login_response,
     logout_request,
     logout_response,
     payload_request,
     payload_response].


get_group_names() -> [].


get_msg_or_group_names() ->
    [login_request,
     login_response,
     logout_request,
     logout_response,
     payload_request,
     payload_response].


get_enum_names() ->
    ['login_response.Ack',
     'logout_response.Ack',
     'payload_response.Ack'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(login_request) ->
    [#{name => data, fnum => 2, rnum => 2, type => string,
       occurrence => optional, opts => []}];
find_msg_def(login_response) ->
    [#{name => status, fnum => 1, rnum => 2,
       type => {enum, 'login_response.Ack'},
       occurrence => optional, opts => []},
     #{name => ack, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []},
     #{name => productid, fnum => 3, rnum => 4,
       type => string, occurrence => optional, opts => []},
     #{name => devaddr, fnum => 4, rnum => 5, type => string,
       occurrence => optional, opts => []},
     #{name => payload, fnum => 5, rnum => 6, type => string,
       occurrence => optional, opts => []}];
find_msg_def(logout_request) ->
    [#{name => productid, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => devaddr, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []},
     #{name => data, fnum => 3, rnum => 4, type => string,
       occurrence => optional, opts => []}];
find_msg_def(logout_response) ->
    [#{name => status, fnum => 1, rnum => 2,
       type => {enum, 'logout_response.Ack'},
       occurrence => optional, opts => []},
     #{name => ack, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []},
     #{name => topic, fnum => 3, rnum => 4, type => string,
       occurrence => optional, opts => []},
     #{name => payload, fnum => 4, rnum => 5, type => string,
       occurrence => optional, opts => []}];
find_msg_def(payload_request) ->
    [#{name => productid, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => devaddr, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []},
     #{name => data, fnum => 3, rnum => 4, type => string,
       occurrence => optional, opts => []}];
find_msg_def(payload_response) ->
    [#{name => status, fnum => 1, rnum => 2,
       type => {enum, 'payload_response.Ack'},
       occurrence => optional, opts => []},
     #{name => ack, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []},
     #{name => topic, fnum => 3, rnum => 4, type => string,
       occurrence => optional, opts => []},
     #{name => payload, fnum => 4, rnum => 5, type => string,
       occurrence => optional, opts => []}];
find_msg_def(_) -> error.


find_enum_def('login_response.Ack') ->
    [{'NOACK', 0}, {'ACK', 1}];
find_enum_def('logout_response.Ack') ->
    [{'NOACK', 0}, {'ACK', 1}];
find_enum_def('payload_response.Ack') ->
    [{'NOACK', 0}, {'ACK', 1}];
find_enum_def(_) -> error.


enum_symbol_by_value('login_response.Ack', Value) ->
    'enum_symbol_by_value_login_response.Ack'(Value);
enum_symbol_by_value('logout_response.Ack', Value) ->
    'enum_symbol_by_value_logout_response.Ack'(Value);
enum_symbol_by_value('payload_response.Ack', Value) ->
    'enum_symbol_by_value_payload_response.Ack'(Value).


enum_value_by_symbol('login_response.Ack', Sym) ->
    'enum_value_by_symbol_login_response.Ack'(Sym);
enum_value_by_symbol('logout_response.Ack', Sym) ->
    'enum_value_by_symbol_logout_response.Ack'(Sym);
enum_value_by_symbol('payload_response.Ack', Sym) ->
    'enum_value_by_symbol_payload_response.Ack'(Sym).


'enum_symbol_by_value_login_response.Ack'(0) -> 'NOACK';
'enum_symbol_by_value_login_response.Ack'(1) -> 'ACK'.


'enum_value_by_symbol_login_response.Ack'('NOACK') -> 0;
'enum_value_by_symbol_login_response.Ack'('ACK') -> 1.

'enum_symbol_by_value_logout_response.Ack'(0) ->
    'NOACK';
'enum_symbol_by_value_logout_response.Ack'(1) -> 'ACK'.


'enum_value_by_symbol_logout_response.Ack'('NOACK') ->
    0;
'enum_value_by_symbol_logout_response.Ack'('ACK') -> 1.

'enum_symbol_by_value_payload_response.Ack'(0) ->
    'NOACK';
'enum_symbol_by_value_payload_response.Ack'(1) -> 'ACK'.


'enum_value_by_symbol_payload_response.Ack'('NOACK') ->
    0;
'enum_value_by_symbol_payload_response.Ack'('ACK') -> 1.


get_service_names() -> ['dgiot.Dlink'].


get_service_def('dgiot.Dlink') ->
    {{service, 'dgiot.Dlink'},
     [#{name => 'Login', input => login_request,
        output => login_response, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'Logout', input => logout_request,
        output => logout_response, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'Payload', input => payload_request,
        output => payload_response, input_stream => false,
        output_stream => false, opts => []}]};
get_service_def(_) -> error.


get_rpc_names('dgiot.Dlink') ->
    ['Login', 'Logout', 'Payload'];
get_rpc_names(_) -> error.


find_rpc_def('dgiot.Dlink', RpcName) ->
    'find_rpc_def_dgiot.Dlink'(RpcName);
find_rpc_def(_, _) -> error.


'find_rpc_def_dgiot.Dlink'('Login') ->
    #{name => 'Login', input => login_request,
      output => login_response, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_dgiot.Dlink'('Logout') ->
    #{name => 'Logout', input => logout_request,
      output => logout_response, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_dgiot.Dlink'('Payload') ->
    #{name => 'Payload', input => payload_request,
      output => payload_response, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_dgiot.Dlink'(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
        Def when is_map(Def) -> Def;
        error ->
            erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"dgiot.Dlink">>) -> 'dgiot.Dlink';
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('dgiot.Dlink') -> <<"dgiot.Dlink">>;
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"dgiot.Dlink">>, <<"Login">>) ->
    {'dgiot.Dlink', 'Login'};
fqbins_to_service_and_rpc_name(<<"dgiot.Dlink">>, <<"Logout">>) ->
    {'dgiot.Dlink', 'Logout'};
fqbins_to_service_and_rpc_name(<<"dgiot.Dlink">>, <<"Payload">>) ->
    {'dgiot.Dlink', 'Payload'};
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('dgiot.Dlink',
                               'Login') ->
    {<<"dgiot.Dlink">>, <<"Login">>};
service_and_rpc_name_to_fqbins('dgiot.Dlink',
                               'Logout') ->
    {<<"dgiot.Dlink">>, <<"Logout">>};
service_and_rpc_name_to_fqbins('dgiot.Dlink',
                               'Payload') ->
    {<<"dgiot.Dlink">>, <<"Payload">>};
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"dgiot.LoginRequest">>) -> login_request;
fqbin_to_msg_name(<<"dgiot.LoginResponse">>) -> login_response;
fqbin_to_msg_name(<<"dgiot.LogoutRequest">>) -> logout_request;
fqbin_to_msg_name(<<"dgiot.LogoutResponse">>) -> logout_response;
fqbin_to_msg_name(<<"dgiot.PayloadRequest">>) -> payload_request;
fqbin_to_msg_name(<<"dgiot.PayloadResponse">>) -> payload_response;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(login_request) -> <<"dgiot.LoginRequest">>;
msg_name_to_fqbin(login_response) -> <<"dgiot.LoginResponse">>;
msg_name_to_fqbin(logout_request) -> <<"dgiot.LogoutRequest">>;
msg_name_to_fqbin(logout_response) -> <<"dgiot.LogoutResponse">>;
msg_name_to_fqbin(payload_request) -> <<"dgiot.PayloadRequest">>;
msg_name_to_fqbin(payload_response) -> <<"dgiot.PayloadResponse">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"dgiot.LoginResponse.Ack">>) -> 'login_response.Ack';
fqbin_to_enum_name(<<"dgiot.LogoutResponse.Ack">>) -> 'logout_response.Ack';
fqbin_to_enum_name(<<"dgiot.PayloadResponse.Ack">>) -> 'payload_response.Ack';
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('login_response.Ack') -> <<"dgiot.LoginResponse.Ack">>;
enum_name_to_fqbin('logout_response.Ack') -> <<"dgiot.LogoutResponse.Ack">>;
enum_name_to_fqbin('payload_response.Ack') -> <<"dgiot.PayloadResponse.Ack">>;
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> dgiot.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "dlink.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["dlink.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["dlink"].


get_msg_containment("dlink") ->
    [login_request,
     login_response,
     logout_request,
     logout_response,
     payload_request,
     payload_response];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("dlink") -> dgiot;
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("dlink") -> ['dgiot.Dlink'];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("dlink") ->
    [{'dgiot.Dlink', 'Login'},
     {'dgiot.Dlink', 'Logout'},
     {'dgiot.Dlink', 'Payload'}];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("dlink") ->
    ['login_response.Ack',
     'logout_response.Ack',
     'payload_response.Ack'];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"dgiot.PayloadRequest">>) -> "dlink";
get_proto_by_msg_name_as_fqbin(<<"dgiot.LogoutRequest">>) -> "dlink";
get_proto_by_msg_name_as_fqbin(<<"dgiot.LoginRequest">>) -> "dlink";
get_proto_by_msg_name_as_fqbin(<<"dgiot.PayloadResponse">>) -> "dlink";
get_proto_by_msg_name_as_fqbin(<<"dgiot.LogoutResponse">>) -> "dlink";
get_proto_by_msg_name_as_fqbin(<<"dgiot.LoginResponse">>) -> "dlink";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"dgiot.Dlink">>) -> "dlink";
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"dgiot.PayloadResponse.Ack">>) -> "dlink";
get_proto_by_enum_name_as_fqbin(<<"dgiot.LogoutResponse.Ack">>) -> "dlink";
get_proto_by_enum_name_as_fqbin(<<"dgiot.LoginResponse.Ack">>) -> "dlink";
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"dgiot">>) -> ["dlink"];
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.11.2".

gpb_version_as_list() ->
    [4,11,2].
